// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url = env("DATABASE_URL")
  relationMode = "prisma"
}

model Store{
  id          String @id @default(uuid())
  name        String
  userId      String
  billBoards  Billboard[] @relation("StoreToBillBoard" )
  catogories  Category[] @relation("StoreToCategory")
  sizes       Size[] @relation("StoreToSize")
  colors       Color[] @relation("StoreToColor")
  products     Product[] @relation("storeToProducts")
  orders      Order[] @relation("storeToOrder")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Billboard{
  id        String @id @default(uuid())
  storeId   String
  store     Store @relation("StoreToBillBoard",fields: [storeId], references: [id])
  label     String
  imageUrl  String
  catogories  Category[]
  createdAt   DateTime @default(now()) 
  upadatedAt  DateTime @updatedAt()

  @@index([storeId]) 
}

model Category{
  id            String @id @default(uuid())
  storeId       String
  store         Store @relation("StoreToCategory",fields: [storeId], references: [id])
  billboardId   String
  billboard     Billboard @relation(fields: [billboardId],references: [id])
  name          String
  userId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  products      Product[] @relation("CategoryToProducts")

  @@index([storeId]) 
  @@index([billboardId]) 
}

model Size{
  id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToSize",fields: [storeId], references: [id])
  name        String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

   @@index([storeId]) 
}

model Color{
   id          String @id @default(uuid())
  storeId     String
  store       Store @relation("StoreToColor",fields: [storeId], references: [id])
  name        String
  value       String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  products    Product[]

   @@index([storeId])  
}

model Product{
  id    String @id @default(uuid())
  storeId String
  store Store @relation("storeToProducts", fields: [storeId], references: [id])
  categoryId String
  category  Category @relation("CategoryToProducts",fields: [categoryId],references: [id])
  name String
  description2 String
  price Decimal
  isFeatures Boolean @default(false)
  isArchived Boolean @default(false)
  colorId String
  color Color @relation(fields: [colorId],references: [id])
  images Image[]

  orderItems OrderItem[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId])  
  @@index([categoryId])  
  @@index([colorId])  
}

model Image{
  id String @id @default(uuid())
  productId String
  product Product @relation(fields: [productId], references: [id],onDelete: Cascade)
  url String 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  @@index([productId])

}
model Order{
  id String @id @default(uuid())
  storeId String
  store Store @relation("storeToOrder",fields: [storeId], references: [id])
  orderItem OrderItem[]
  paid Boolean @default(false)
  phone String @default("")
  address String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([storeId]) 
}

model OrderItem{
  id String @id @default(uuid())
  orderId String
  order Order @relation(fields: [orderId],references: [id])
  productId String
  product Product @relation(fields: [productId],references: [id])
  @@index([orderId])
  @@index([productId])
}